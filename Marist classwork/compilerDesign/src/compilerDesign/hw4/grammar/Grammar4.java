/* Generated By:JavaCC: Do not edit this line. Grammar4.java */
package compilerDesign.hw4.grammar;

import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.LinkedList;

import compilerDesign.hw4.scope.BigScope;
import compilerDesign.hw4.scope.Entry;
import compilerDesign.hw4.scope.Entry.Type;

@SuppressWarnings("all")
public class Grammar4 implements Grammar4Constants {
  /** A "buffer" for output from the compilation phase. */
  private static LinkedList<Message> output = new LinkedList<Message>();

  /** The newline character (or characters) based on platform. */
  public static String NEWLINE = System.getProperty("line.separator");

  static BigScope symbolTable = new BigScope();

  /**
   * Empties the output buffer and symbol table.
   */
  public static void reset()
  {
    output.clear();
    symbolTable.reset();
  }

  public static String getSymbolTableText()
  {
    return symbolTable.displayTable();
  }

  /**
   * Gets a string containing all of the data in the output buffer.
   */
  public static Message[] getOutput()
  {
    return output.toArray(new Message[output.size()]);
  }

  /**
   * Appends the specified string to the end of the output buffer, followed by
   * a newline.
   * @param s the string to append
   */
  public static void appendln(String s)
  {
    output.add(new Message(s, false));
  }

  /**
   * Appends the specified string to the end of the output buffer, followed by
   * a newline.
   * @param s the string to append
   */
  public static void appendlnV(String s)
  {
    output.add(new Message(s, true));
  }

  public static Type resolveType(String s)
  {
        if(s == null)
      return null;

    if("int".equals(s))
      return Type.INT;

    if("char".equals(s))
      return Type.CHAR;

    return null;
  }

  public static Type determineType(String s)
  {
    if(s == null)
      return null;

    if(isDigit(s))
      return Type.INT;

    if(isChar(s) || isCharList(s))
      return Type.CHAR;

    return null;
  }

  public static boolean isDigit(String s)
  {
        return Character.isDigit(s.charAt(0));
  }

  public static boolean isChar(String s)
  {
        return Character.isLowerCase(s.charAt(0));
  }

  public static boolean isCharList(String s)
  {
        if(s.startsWith("\"") && s.endsWith("\""))
          return true;

        return false;
  }

  public static void main(String args[])
  throws ParseException, IOException
  {
    Reader stream = null;

    if (args.length == 0)
    {
      // use the console (standard input)
      stream = new InputStreamReader(System.in);
    }
    else if (args.length == 1)
    {
      // read from a file
      stream = new FileReader(args[0]);
    }
    else
    {
      // print usage notes
      System.out.println("Arguments:");
      System.out.println("[file] - optionally specify an input file");
      System.out.println("Standard input is used if no file is specified.");

      return;
    }

    Grammar4 parser = new Grammar4(stream);

    parser.Input();
  }

  static final public void Input() throws ParseException {
  // "setup" the environment
  symbolTable.addNewScope();

  appendln("In Input()");
    Statement();
    jj_consume_token(0);
        // close the symbol table
    symbolTable.closeCurrentScope();

    appendln("Parse complete.");

    symbolTable.displayTable();//XXX

  }

  static final public String Statement() throws ParseException {
  String s1, s2;
  Token now = token;

  appendln("In Statement()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Print:
      jj_consume_token(Print);
      jj_consume_token(LParen);
      s1 = Expression();
      jj_consume_token(RParen);
    s1 = "PrintStmt: " + s1;

    appendlnV(s1);
    {if (true) return s1;}
      break;
    case CharLiteral:
      s1 = Id();
      jj_consume_token(Equals);
      s2 = Expression();
    appendlnV(":Checking for '" + s1 + "' in symbol table");

    Type t = determineType(s2);

    Entry e = symbolTable.getEntryByName(s1);

    boolean notDeclared = (e == null);

    if(notDeclared)
      {if (true) throw new ParseException(
          "Not defined: '" + s1 + "' " +
          "(at line " + now.beginLine + ", column " +
          now.beginColumn + ")");}

    appendlnV(":Has been declared");

    if(!symbolTable.isEntryInScope(e))
      {if (true) throw new ParseException(
          "Visibility: '" + s1 + "' is not visible in the current scope " +
          "(at line " + now.beginLine + ", column " +
          now.beginColumn + ")");}

    appendlnV(":Is in scope");

    boolean validAssignment = (t == e.getType());

    if(!validAssignment)
      {if (true) throw new ParseException(
          "Incompatible types: '" + s1 + "' was defined with type " +
          e.getType() + ", but the value being assigned is of type " + t +
          " (at line " + now.beginLine + ", column " +
          now.beginColumn + ")");}

    appendlnV(":Types match");

    s1 = "AsssignStmt: " + s1 + " = " + s2;

    appendlnV(s1);
    {if (true) return s1;}
      break;
    case Int:
    case Char:
      s1 = VarDecl();
    s1 = "VarDeclStatement: " + s1;

    appendlnV(s1);
    {if (true) return s1;}
      break;
    case LBrace:
      jj_consume_token(LBrace);
      s1 = StatementList();
      jj_consume_token(RBrace);
        symbolTable.closeCurrentScope();

    s1 = "StmtList: {" + s1 + "}";

    appendlnV(s1);
    {if (true) return s1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String StatementList() throws ParseException {
  String s1 = null, s2 = null;

  appendln("In StatementList()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
    case Char:
    case CharLiteral:
    case Print:
    case LBrace:
      s1 = Statement();
      s2 = StatementList();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        String ret = "< " + s1 + " | " + s2 + " >";

    appendlnV(" StmtList: " + ret);

    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public String Expression() throws ParseException {
  Token t;
  String s;

  Token now = token;

  appendln("In Expression()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Digit:
      s = IntExpression();
    appendlnV("IntExpr: " + s);
    {if (true) return s;}
      break;
    case STRING_LITERAL:
      s = CharExpression();
    appendlnV("CharExpr: " + s);
    {if (true) return s;}
      break;
    case CharLiteral:
      s = Id();
        appendlnV(":Checking for '" + s + "' in symbol table");

        Entry e = symbolTable.getEntryByName(s);

    boolean notDeclared = (e == null);

    if(notDeclared)
      {if (true) throw new ParseException(
          "Not defined: '" + s + "' " +
          "(at line " + now.beginLine + ", column " +
          now.beginColumn + ")");}

    appendlnV(":Has been declared");

    if(!symbolTable.isEntryInScope(e))
      {if (true) throw new ParseException(
          "Visibility: '" + s + "' is not visible in the current scope " +
          "(at line " + now.beginLine + ", column " +
          now.beginColumn + ")");}

    appendlnV(":Is in scope");

    appendlnV("Id: " + s);
    {if (true) return s;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String IntExpression() throws ParseException {
  Token t;
  String s;

  appendln("In IntExpression()");
    t = jj_consume_token(Digit);
    s = OpExpression();
    appendlnV("IntExpr: " + t.image + " " + s);
    {if (true) return t.image + " " + s;}
    throw new Error("Missing return statement in function");
  }

  static final public String OpExpression() throws ParseException {
  Token t = null;
  String s = null;

  appendln("In OpExpression()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op:
      t = jj_consume_token(Op);
      s = Expression();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    if(t == null || s == null)
      {if (true) return "";}
    else
    {
      appendlnV("OpExpr: " + t.image + " " + s);
      {if (true) return t.image + " " + s;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String CharExpression() throws ParseException {
  Token t;
  String s;
    s = CharList();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String CharList() throws ParseException {
  Token t = null;
    t = jj_consume_token(STRING_LITERAL);
    if(t != null)
      {if (true) return t.image;}

        {if (true) return "<null>";}
    throw new Error("Missing return statement in function");
  }

  static final public String VarDecl() throws ParseException {
  String s1, s2;
  Token now = token.next;

  appendln("In VarDecl()");
    s1 = Type();
    s2 = Id();
        Entry e = symbolTable.getEntryByName(s2);

    appendlnV(":Checking for '" + s2 + "' in symbol table");

    if(e != null)
      {if (true) throw new ParseException(
          "Already defined: " + s2 +
          " was already defined with type " + e.getType() +
          " (at line " + now.beginLine + ", column " +
          now.beginColumn + ")");}

        appendlnV(":Not found, adding");

        symbolTable.addToCurrentScope(s2, resolveType(s1));

    appendlnV("VarDecl: " + s2 + " [" + resolveType(s1) + "]");
    {if (true) return s2 + " [" + resolveType(s1) + "]";}
    throw new Error("Missing return statement in function");
  }

  static final public String Id() throws ParseException {
  Token t;

  appendln("In Id()");
    t = jj_consume_token(CharLiteral);
    appendlnV("Id: " + t.image);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Type() throws ParseException {
  Token t;

  appendln("In Type()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      t = jj_consume_token(Int);
    appendlnV("Type: " + t.image);
    {if (true) return t.image;}
      break;
    case Char:
      t = jj_consume_token(Char);
    appendlnV("Type: " + t.image);
    {if (true) return t.image;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public Grammar4TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x24e0,0x24e0,0x10180,0x200,0x60,};
   }

  public Grammar4(java.io.InputStream stream) {
     this(stream, null);
  }
  public Grammar4(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Grammar4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public Grammar4(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Grammar4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public Grammar4(Grammar4TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(Grammar4TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[17];
    for (int i = 0; i < 17; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
